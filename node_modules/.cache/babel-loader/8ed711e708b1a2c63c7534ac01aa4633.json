{"ast":null,"code":"import axios from 'axios';\nimport config from '../config/index';\n\nconst getBodyPartsAndDurationData = async (date, time, therapistName, roomName, id) => {\n  let url = '';\n\n  if (therapistName) {\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/` + `selectedRoom/${roomName}/selectedTherapist/${therapistName}/id/${id}`;\n  } else {\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/` + `selectedRoom/${roomName}/id/${id}`;\n  }\n\n  try {\n    const {\n      data: {\n        availableTreatmentList,\n        code\n      }\n    } = await axios.get(url);\n\n    if (code === 200) {\n      return availableTreatmentList;\n    }\n\n    if (code === 404) {\n      const result = ['None'];\n      return result;\n    }\n  } catch (error) {\n    throw new Error(`Update Appointment API - get body parts and duration data ${error}`);\n  }\n\n  return null;\n};\n\nconst getTherapist = async (date, time, bodyPartsAndDuration, id) => {\n  let url = '';\n\n  if (bodyPartsAndDuration) {\n    const parts = bodyPartsAndDuration.split('--');\n    const treatmentDuration = parts[1].split(' ')[0] * 1;\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/` + `selectedTreatmentTime/${treatmentDuration}/id/${id}`;\n  } else {\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/id/${id}`;\n  }\n\n  try {\n    let therapistList = await axios.get(url);\n    const {\n      code\n    } = therapistList.data;\n\n    if (code === 200) {\n      therapistList = therapistList.data.therapistList;\n      const list = therapistList.map(p => p.firstName);\n      return list;\n    }\n\n    if (code === 404) {\n      const list = ['None'];\n      return list;\n    }\n  } catch (error) {\n    throw new Error(`Update Appointment API - get therapist ${error}`);\n  }\n\n  return null;\n};\n\nconst getDefaultPrice = async (treatmentBodyPart, treatmentDuration, treatmentStyle) => {\n  try {\n    const url = `${config.baseUrl.dev}/treatmentPrice`;\n\n    if (treatmentBodyPart !== 'None') {\n      const res = await axios.post(url, {\n        treatmentBodyPart,\n        treatmentDuration,\n        treatmentStyle\n      });\n      return res.data;\n    }\n\n    if (treatmentBodyPart === 'None') {\n      return 'None';\n    }\n  } catch (error) {\n    throw new Error(`Update Appointment API - get default price ${error}`);\n  }\n\n  return null;\n};\n\nconst deleteService = async (id, role) => {\n  const url = `${config.baseUrl.dev}/${role}DeleteService/${id}`;\n\n  try {\n    const result = await axios.delete(url);\n    return result;\n  } catch (error) {\n    throw new Error(`Update Appointment API - delete service ${error}`);\n  }\n};\n\nexport { getTherapist, getBodyPartsAndDurationData, getDefaultPrice, deleteService };","map":{"version":3,"sources":["/Users/sammi/Desktop/TherapyGo/src/api/updateAppointment-api.js"],"names":["axios","config","getBodyPartsAndDurationData","date","time","therapistName","roomName","id","url","baseUrl","dev","data","availableTreatmentList","code","get","result","error","Error","getTherapist","bodyPartsAndDuration","parts","split","treatmentDuration","therapistList","list","map","p","firstName","getDefaultPrice","treatmentBodyPart","treatmentStyle","res","post","deleteService","role","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport config from '../config/index';\n\nconst getBodyPartsAndDurationData = async (date, time, therapistName, roomName, id) => {\n  let url = '';\n  if (therapistName) {\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/`+\n    `selectedRoom/${roomName}/selectedTherapist/${therapistName}/id/${id}`;\n  } else {\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/`+\n    `selectedRoom/${roomName}/id/${id}`;\n  }\n  try {\n    const {\n      data: { availableTreatmentList, code },\n    } = await axios.get(url);\n    if (code === 200) {\n      return availableTreatmentList;\n    }\n    if (code === 404) {\n      const result = ['None'];\n      return result;\n    }\n  } catch (error) {\n    throw new Error(`Update Appointment API - get body parts and duration data ${error}`);\n  }\n  return null;\n};\n\nconst getTherapist = async (date, time, bodyPartsAndDuration, id) => {\n  let url = '';\n  if (bodyPartsAndDuration) {\n    const parts = bodyPartsAndDuration.split('--');\n    const treatmentDuration = parts[1].split(' ')[0] * 1;\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/`+\n    `selectedTreatmentTime/${treatmentDuration}/id/${id}`;\n  } else {\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/id/${id}`;\n  }\n  try {\n    let therapistList = await axios.get(url);\n    const { code } = therapistList.data;\n    if (code === 200) {\n      therapistList = therapistList.data.therapistList;\n      const list = therapistList.map((p) => p.firstName);\n      return list;\n    }\n    if (code === 404) {\n      const list = ['None'];\n      return list;\n    }\n  } catch (error) {\n    throw new Error(`Update Appointment API - get therapist ${error}`);\n  }\n  return null;\n};\n\nconst getDefaultPrice = async (treatmentBodyPart, treatmentDuration, treatmentStyle) => {\n  try {\n    const url = `${config.baseUrl.dev}/treatmentPrice`;\n    if (treatmentBodyPart !== 'None') {\n      const res = await axios.post(url, {\n        treatmentBodyPart,\n        treatmentDuration,\n        treatmentStyle,\n      });\n      return res.data;\n    }\n    if (treatmentBodyPart === 'None') {\n      return 'None';\n    }\n  } catch (error) {\n    throw new Error(`Update Appointment API - get default price ${error}`);\n  }\n  return null;\n};\n\nconst deleteService = async (id, role) => {\n  const url = `${config.baseUrl.dev}/${role}DeleteService/${id}`;\n  try {\n    const result = await axios.delete(url);\n    return result;\n  } catch (error) {\n    throw new Error(`Update Appointment API - delete service ${error}`);\n  }\n};\n\nexport { getTherapist, getBodyPartsAndDurationData, getDefaultPrice, deleteService };\n"]},"metadata":{},"sourceType":"module"}