{"ast":null,"code":"var _jsxFileName = \"/Users/sammi/Desktop/TherapyGo/src/pages/ProfilePage/Components/NewAppointmentTable/NewAppointmentTable.js\";\nimport React from 'react';\nimport './NewAppointmentTable.scss';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport Swal from 'sweetalert2';\nimport { deleteService } from '../../../../api/updateAppointment-api';\nimport { fetchOrderHistory } from '../../../../store/actions/userProfileActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getDataPerPage = (orderHistoryData, rowsPerPage) => {\n  const currentDate = Date.parse(moment().format('YYYY-M-DD'));\n  const orderHistorySortData = orderHistoryData.sort((a, b) => Date.parse(a.date) - Date.parse(b.date));\n  const newService = [];\n  let i = 0;\n\n  for (i = 0; i < orderHistorySortData.length; i += 1) {\n    if (currentDate - Date.parse(orderHistorySortData[i].date) <= 0) {\n      newService.push(orderHistorySortData[i]);\n    }\n  }\n\n  let result = [];\n\n  if (newService.length <= rowsPerPage) {\n    result = newService;\n  } else {\n    const endNumber = newService.length - 1;\n    const startNumber = newService.length - 1 - rowsPerPage;\n    result = newService.slice(startNumber, endNumber);\n  }\n\n  return result;\n};\n\nconst cancelAppointment = (id, refreshPage) => {\n  const customerIdls = sessionStorage.getItem('customer_id');\n  const payload = {\n    customerId: customerIdls\n  };\n  Swal.fire({\n    title: 'Are you sure?',\n    text: \"You won't be able to revert this!\",\n    icon: 'warning',\n    showCancelButton: true,\n    confirmButtonColor: '#3085d6',\n    cancelButtonColor: '#d33',\n    confirmButtonText: 'Yes, cancel it!',\n    cancelButtonText: 'Close'\n  }).then(result => {\n    if (result.isConfirmed) {\n      deleteService(id, 'customer').then(res => {\n        if (res.status === 200) {\n          Swal.fire('Appointment Cancelled!', 'The appointment has been successfully cancelled.', 'success');\n          refreshPage(payload);\n        } else {\n          Swal.fire('Appointment Not Cancelled!', 'There were error when cancelling this appointment. Please try again.', 'error');\n        }\n      });\n    }\n  });\n};\n\nconst NewAppointmentTable = props => {\n  let orderHistoryData = [];\n  const {\n    orderHistory,\n    fetchOrderHistoryAction\n  } = props;\n\n  if (orderHistory.length !== 0) {\n    const {\n      serviceList\n    } = orderHistory;\n\n    if (serviceList !== undefined) {\n      orderHistoryData = serviceList;\n    }\n  }\n\n  const orderHistoryPerPage = getDataPerPage(orderHistoryData, 5);\n  const currentDate = moment().format('YYYY-M-DD');\n  ;\n  const refreshPage = fetchOrderHistoryAction;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"order-history\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"activity-card\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Time\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Service\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Staff\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Duration\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Payment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 93,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: orderHistoryPerPage.map((order, index) => currentDate <= order.date ? /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.date\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.time\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.treatmentBodyPart\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.therapist\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.serviceDuration\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.price\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.paymentStatus\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: order.date ? /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"secondary\",\n                  size: \"small\",\n                  onClick: () => cancelAppointment(order.serviceId, refreshPage),\n                  children: \"Cancel\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 23\n                }, this) : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this) : null)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_c = NewAppointmentTable;\n\nconst mapStateToProps = state => {\n  const {\n    userProfile\n  } = state;\n  const {\n    userInformation,\n    orderHistory\n  } = userProfile;\n  return {\n    userInformation,\n    orderHistory\n  };\n};\n\nconst mapActionsToProps = {\n  fetchOrderHistoryAction: fetchOrderHistory\n};\nexport default connect(mapStateToProps, mapActionsToProps)(NewAppointmentTable);\n\nvar _c;\n\n$RefreshReg$(_c, \"NewAppointmentTable\");","map":{"version":3,"sources":["/Users/sammi/Desktop/TherapyGo/src/pages/ProfilePage/Components/NewAppointmentTable/NewAppointmentTable.js"],"names":["React","moment","connect","Button","Swal","deleteService","fetchOrderHistory","getDataPerPage","orderHistoryData","rowsPerPage","currentDate","Date","parse","format","orderHistorySortData","sort","a","b","date","newService","i","length","push","result","endNumber","startNumber","slice","cancelAppointment","id","refreshPage","customerIdls","sessionStorage","getItem","payload","customerId","fire","title","text","icon","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","isConfirmed","res","status","NewAppointmentTable","props","orderHistory","fetchOrderHistoryAction","serviceList","undefined","orderHistoryPerPage","map","order","index","time","treatmentBodyPart","therapist","serviceDuration","price","paymentStatus","serviceId","mapStateToProps","state","userProfile","userInformation","mapActionsToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport './NewAppointmentTable.scss';\r\nimport moment from 'moment';\r\nimport { connect } from 'react-redux';\r\nimport Button from '@material-ui/core/Button';\r\nimport Swal from 'sweetalert2';\r\nimport { deleteService } from '../../../../api/updateAppointment-api';\r\nimport { fetchOrderHistory } from '../../../../store/actions/userProfileActions';\r\n\r\nconst getDataPerPage = (orderHistoryData, rowsPerPage) => {\r\n  const currentDate = Date.parse(moment().format('YYYY-M-DD'));\r\n  const orderHistorySortData = orderHistoryData.sort(\r\n    (a, b) => Date.parse(a.date) - Date.parse(b.date));\r\n  const newService = [];\r\n  let i = 0;\r\n  for (i = 0; i < orderHistorySortData.length; i += 1) {\r\n    if (currentDate - Date.parse(orderHistorySortData[i].date) <= 0) {\r\n      newService.push(orderHistorySortData[i]);\r\n    }\r\n  }\r\n  let result = [];\r\n  if (newService.length <= rowsPerPage) {\r\n    result = newService;\r\n  } else {\r\n    const endNumber = newService.length - 1;\r\n    const startNumber = newService.length - 1 - rowsPerPage;\r\n    result = newService.slice(startNumber, endNumber);\r\n  }\r\n  return result;\r\n};\r\n\r\nconst cancelAppointment = (id, refreshPage) => {\r\n  const customerIdls = sessionStorage.getItem('customer_id');\r\n  const payload = { customerId: customerIdls };\r\n  Swal.fire({\r\n    title: 'Are you sure?',\r\n    text: \"You won't be able to revert this!\",\r\n    icon: 'warning',\r\n    showCancelButton: true,\r\n    confirmButtonColor: '#3085d6',\r\n    cancelButtonColor: '#d33',\r\n    confirmButtonText: 'Yes, cancel it!',\r\n    cancelButtonText: 'Close',\r\n  }).then((result) => {\r\n    if (result.isConfirmed) {\r\n      deleteService(id, 'customer').then((res) => {\r\n        if (res.status === 200) {\r\n          Swal.fire(\r\n            'Appointment Cancelled!',\r\n            'The appointment has been successfully cancelled.',\r\n            'success',\r\n          );\r\n          refreshPage(payload);\r\n        } else {\r\n          Swal.fire(\r\n            'Appointment Not Cancelled!',\r\n            'There were error when cancelling this appointment. Please try again.',\r\n            'error',\r\n          );\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\nconst NewAppointmentTable = (props) => {\r\n  let orderHistoryData = [];\r\n  const { orderHistory , fetchOrderHistoryAction} = props;\r\n  if (orderHistory.length !== 0) {\r\n    const { serviceList } = orderHistory;\r\n    if (serviceList !== undefined) {\r\n      orderHistoryData = serviceList;\r\n    }\r\n  }\r\n\r\n  const orderHistoryPerPage = getDataPerPage(orderHistoryData, 5);\r\n  const currentDate = moment().format('YYYY-M-DD');;\r\n  const refreshPage = fetchOrderHistoryAction;\r\n  return (\r\n    <div className=\"order-history\">\r\n      <div className=\"activity-card\">\r\n        <div className=\"table-responsive\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>Time</th>\r\n                <th>Service</th>\r\n                <th>Staff</th>\r\n                <th>Duration</th>\r\n                <th>Payment</th>\r\n                <th>Status</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {orderHistoryPerPage.map((order, index) => currentDate <= order.date ? (\r\n                <tr key={index}>\r\n                  <td>{order.date}</td>\r\n                  <td>{order.time}</td>\r\n                  <td>{order.treatmentBodyPart}</td>\r\n                  <td>{order.therapist}</td>\r\n                  <td>{order.serviceDuration}</td>\r\n                  <td>{order.price}</td>\r\n                  <td>{order.paymentStatus}</td>\r\n                  <td>\r\n                    {order.date ? (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        size=\"small\"\r\n                        onClick={() => cancelAppointment(order.serviceId, refreshPage)}\r\n                      >\r\n                        Cancel\r\n                      </Button>\r\n                      ) : null}\r\n                  </td>\r\n                </tr>\r\n                ) : null)}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nconst mapStateToProps = (state) => {\r\n  const { userProfile } = state;\r\n  const { userInformation, orderHistory } = userProfile;\r\n  return {\r\n    userInformation,\r\n    orderHistory,\r\n  };\r\n};\r\n\r\nconst mapActionsToProps = {\r\n  fetchOrderHistoryAction: fetchOrderHistory,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapActionsToProps)(NewAppointmentTable);\r\n"]},"metadata":{},"sourceType":"module"}