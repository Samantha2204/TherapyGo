{"ast":null,"code":"var _jsxFileName = \"/Users/sammi/Desktop/TherapyGo/src/pages/LoginPage/SignupForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Input from '../../components/reusableComponent/Input';\nimport { signup } from '../../api/login';\nimport MyButton from '../../components/LoginFormComponent/MyButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n  mobile: ''\n};\n\nconst Signup = () => {\n  _s();\n\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n\n  const validate = (fieldValues = values) => {\n    const temp = { ...errors\n    };\n    const reg = {};\n    reg.name = /^\\w{4,16}$/;\n    reg.email = /^[0-9a-zA-Z_.-]+[@][0-9a-zA-Z_.-]+([.][a-zA-Z]+){1,2}$/;\n    reg.password = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[^]{6,20}$/;\n    if ('name' in fieldValues) temp.name = reg.name.test(fieldValues.name) ? '' : 'This field is required.';\n    if ('email' in fieldValues) temp.email = reg.email.test(fieldValues.email) ? '' : 'Email is not valid.';\n\n    if ('password' in fieldValues) {\n      if (fieldValues.password.length < 6) {\n        temp.password = 'Password is at least 6 characters';\n      } else {\n        temp.password = reg.password.test(fieldValues.password) ? '' : 'Password must include 1 uppercase letter and 1 number.';\n      }\n    }\n\n    if ('confirmPassword' in fieldValues) temp.confirmPassword = fieldValues.confirmPassword === values.password ? '' : 'Password must be matched';\n    setErrors({ ...temp\n    });\n    return Object.values(temp).every(x => x === '');\n  };\n\n  const resetForm = () => {\n    setValues(initialValues);\n    setErrors({});\n  };\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      [name]: value\n    });\n    validate({\n      [name]: value\n    });\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await signup(values).then(res => {\n      if (res.code === 409) {\n        setErrors({ ...errors,\n          email: res.message\n        });\n      }\n    }).catch(err => {\n      throw new Error(`Sign up form - sign up fail ${err}`);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      label: \"Name\",\n      name: \"name\",\n      autoFocus: true,\n      value: values.name,\n      onChange: handleChange,\n      error: errors.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"email\",\n      label: \"Email\",\n      name: \"email\",\n      value: values.email,\n      onChange: handleChange,\n      error: errors.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"password\",\n      label: \"Password\",\n      name: \"password\",\n      value: values.password,\n      onChange: handleChange,\n      error: errors.password\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"password\",\n      label: \"Confirm password\",\n      name: \"confirmPassword\",\n      value: values.confirmPassword,\n      onChange: handleChange,\n      error: errors.confirmPassword\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(MyButton, {\n        text: \"SUBMIT\",\n        type: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n        type: \"reset\",\n        text: \"RESET\",\n        onClick: resetForm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Signup, \"n1PFYgq5JtbzkIsmPbSRLOOcfKE=\");\n\n_c = Signup;\nexport default Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"sources":["/Users/sammi/Desktop/TherapyGo/src/pages/LoginPage/SignupForm.js"],"names":["React","useState","Input","signup","MyButton","initialValues","name","email","password","confirmPassword","mobile","Signup","values","setValues","errors","setErrors","validate","fieldValues","temp","reg","test","length","Object","every","x","resetForm","handleChange","e","value","target","handleSubmit","preventDefault","then","res","code","message","catch","err","Error"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Input from '../../components/reusableComponent/Input';\nimport { signup } from '../../api/login';\nimport MyButton from '../../components/LoginFormComponent/MyButton';\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n  confirmPassword: '',\n  mobile: '',\n};\n\nconst Signup = () => {\n  const [values, setValues] = useState(initialValues);\n  const [errors, setErrors] = useState({});\n\n  const validate = (fieldValues = values) => {\n    const temp = { ...errors };\n    const reg = {};\n    reg.name = /^\\w{4,16}$/;\n    reg.email = /^[0-9a-zA-Z_.-]+[@][0-9a-zA-Z_.-]+([.][a-zA-Z]+){1,2}$/;\n    reg.password = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[^]{6,20}$/;\n\n    if ('name' in fieldValues)\n      temp.name = reg.name.test(fieldValues.name) ? '' : 'This field is required.';\n    if ('email' in fieldValues)\n      temp.email = reg.email.test(fieldValues.email) ? '' : 'Email is not valid.';\n    if ('password' in fieldValues) {\n      if (fieldValues.password.length < 6) {\n        temp.password = 'Password is at least 6 characters';\n      } else {\n        temp.password = reg.password.test(fieldValues.password)\n          ? ''\n          : 'Password must include 1 uppercase letter and 1 number.';\n      }\n    }\n    if ('confirmPassword' in fieldValues)\n      temp.confirmPassword =\n        fieldValues.confirmPassword === values.password ? '' : 'Password must be matched';\n\n    setErrors({\n      ...temp,\n    });\n    return Object.values(temp).every((x) => x === '');\n  };\n\n  const resetForm = () => {\n    setValues(initialValues);\n    setErrors({});\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setValues({\n      ...values,\n      [name]: value,\n    });\n    validate({ [name]: value });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    await signup(values)\n      .then((res) => {\n        if (res.code === 409) {\n          setErrors({ ...errors, email: res.message });\n        }\n      })\n      .catch((err) => {\n        throw new Error(`Sign up form - sign up fail ${err}`);\n      });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        label=\"Name\"\n        name=\"name\"\n        autoFocus\n        value={values.name}\n        onChange={handleChange}\n        error={errors.name}\n      />\n      <Input\n        type=\"email\"\n        label=\"Email\"\n        name=\"email\"\n        value={values.email}\n        onChange={handleChange}\n        error={errors.email}\n      />\n      <Input\n        type=\"password\"\n        label=\"Password\"\n        name=\"password\"\n        value={values.password}\n        onChange={handleChange}\n        error={errors.password}\n      />\n      <Input\n        type=\"password\"\n        label=\"Confirm password\"\n        name=\"confirmPassword\"\n        value={values.confirmPassword}\n        onChange={handleChange}\n        error={errors.confirmPassword}\n      />\n      <div className=\"register-buttons\">\n        <MyButton text=\"SUBMIT\" type=\"submit\" />\n        <MyButton type=\"reset\" text=\"RESET\" onClick={resetForm} />\n      </div>\n    </form>\n  );\n};\n\nexport default Signup;\n"]},"metadata":{},"sourceType":"module"}