{"ast":null,"code":"var _jsxFileName = \"/Users/sammi/Desktop/TherapyGo/src/components/NavigationBar/NavigationBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport './NavigationBar.scss';\nimport { useHistory } from 'react-router-dom';\nimport ExitToAppRoundedIcon from '@material-ui/icons/ExitToAppRounded';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { IconButton } from '@material-ui/core';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Popover from '@material-ui/core/Popover';\nimport Badge from '@material-ui/core/Badge';\nimport Swal from 'sweetalert2';\nimport Logo from '../../assets/images/Logo.png';\nimport { getAllNotification, markAllNotificationAsRead } from '../../api/worksheet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst NavigationBar = () => {\n  _s();\n\n  const currentRoute = useHistory().location.pathname.toLowerCase();\n  const history = useHistory();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [notificationCount, setNotificationCount] = useState(0);\n  const [notificationList, setNotificationList] = useState([]);\n\n  const getNotificationCount = () => {\n    let i;\n    let count = 0;\n\n    for (i = 0; i < notificationList.length; i += 1) {\n      if (notificationList[i].new === true) {\n        count += 1;\n      }\n    }\n\n    setNotificationCount(count);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getAllNotification().then(res => setNotificationList(res));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    getNotificationCount();\n  }, [notificationList]);\n\n  const setAllAsRead = () => {\n    setNotificationCount(0);\n    let i;\n\n    for (i = 0; i < notificationList.length; i += 1) {\n      if (notificationList[i].new === true) {\n        notificationList[i].new = false;\n      }\n    }\n\n    markAllNotificationAsRead().then(status => {\n      if (status === 200) {\n        setNotificationList(notificationList);\n      } else {\n        Swal.fire('Fail to set all to read', 'There was an error while conducting this action. Please try again.', 'error');\n      }\n    });\n  };\n\n  const renderNotification = () => notificationList.map((notification, index) => /*#__PURE__*/_jsxDEV(List, {\n    children: [index === notificationList.length - 1 ? /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"mainNavBar__mark-all\",\n      onClick: setAllAsRead,\n      children: \"Mark All As Read\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this) : '', /*#__PURE__*/_jsxDEV(ListItem, {\n      children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n        children: /*#__PURE__*/_jsxDEV(Avatar, {\n          alt: \"action\",\n          src: notification.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: notification.message,\n        secondary: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: notification.receivedTime\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), notification.new ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mainNavBar__status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 33\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }, this), index === 0 ? '' : /*#__PURE__*/_jsxDEV(Divider, {\n      variant: \"inset\",\n      component: \"li\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 31\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this)).reverse();\n\n  const handleClick = event => {\n    renderNotification();\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const logout = () => {\n    history.push('/');\n    sessionStorage.clear();\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n  const role = sessionStorage.getItem('role');\n  return /*#__PURE__*/_jsxDEV(Navbar, {\n    bg: \"light\",\n    variant: \"light\",\n    className: \"mainNavBar\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar.Brand, {\n      href: \"/\",\n      className: \"mainNavBar__company-name\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"\",\n        src: Logo,\n        className: ('d-inline-block align-top', 'mainNavBar__logo')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), \"TherapyGo\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Nav, {\n      className: \"mainNavBar__navBar\",\n      children: [role.includes('boss') ? /*#__PURE__*/_jsxDEV(Nav.Link, {\n        href: \"/staff\",\n        className: currentRoute.includes('staff') ? 'mainNavBar__navIsCurrent' : '',\n        children: \"Staff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this) : '', /*#__PURE__*/_jsxDEV(Nav.Link, {\n        href: \"/worksheet\",\n        className: currentRoute.includes('worksheet') ? 'mainNavBar__navIsCurrent' : '',\n        children: \"Worksheet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Nav.Link, {\n        href: \"/schedule\",\n        className: currentRoute.includes('schedule') ? 'mainNavBar__navIsCurrent' : '',\n        children: \"Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n      \"aria-label\": \"show 11 new notifications\",\n      color: \"inherit\",\n      onClick: handleClick,\n      children: /*#__PURE__*/_jsxDEV(Badge, {\n        badgeContent: notificationCount,\n        color: \"secondary\",\n        children: /*#__PURE__*/_jsxDEV(NotificationsIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Popover, {\n      id: id,\n      open: open,\n      anchorEl: anchorEl,\n      onClose: handleClose,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      },\n      transformOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      children: open ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mainNavBar__notification\",\n        children: renderNotification()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this) : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n      className: \"mainNavBar__logOutButton\",\n      onClick: logout,\n      children: /*#__PURE__*/_jsxDEV(ExitToAppRoundedIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NavigationBar, \"Mcv6Ld0/pqUbjXL8cK0AmQG4cGo=\", false, function () {\n  return [useHistory, useHistory];\n});\n\n_c = NavigationBar;\nexport default NavigationBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"NavigationBar\");","map":{"version":3,"sources":["/Users/sammi/Desktop/TherapyGo/src/components/NavigationBar/NavigationBar.js"],"names":["React","useState","useEffect","Navbar","Nav","useHistory","ExitToAppRoundedIcon","NotificationsIcon","IconButton","List","ListItem","Divider","ListItemText","ListItemAvatar","Avatar","Popover","Badge","Swal","Logo","getAllNotification","markAllNotificationAsRead","NavigationBar","currentRoute","location","pathname","toLowerCase","history","anchorEl","setAnchorEl","notificationCount","setNotificationCount","notificationList","setNotificationList","getNotificationCount","i","count","length","new","interval","setInterval","then","res","clearInterval","setAllAsRead","status","fire","renderNotification","map","notification","index","image","message","receivedTime","reverse","handleClick","event","currentTarget","handleClose","logout","push","sessionStorage","clear","open","Boolean","id","undefined","role","getItem","includes","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport './NavigationBar.scss';\nimport { useHistory } from 'react-router-dom';\nimport ExitToAppRoundedIcon from '@material-ui/icons/ExitToAppRounded';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport { IconButton } from '@material-ui/core';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Popover from '@material-ui/core/Popover';\nimport Badge from '@material-ui/core/Badge';\nimport Swal from 'sweetalert2';\nimport Logo from '../../assets/images/Logo.png';\nimport { getAllNotification, markAllNotificationAsRead } from '../../api/worksheet';\n\nconst NavigationBar = () => {\n  const currentRoute = useHistory().location.pathname.toLowerCase();\n  const history = useHistory();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [notificationCount, setNotificationCount] = useState(0);\n  const [notificationList, setNotificationList] = useState([]);\n\n  const getNotificationCount = () => {\n    let i;\n      let count = 0;\n    for (i = 0; i < notificationList.length; i += 1) {\n      if (notificationList[i].new === true) {\n        count += 1;\n      }\n    }\n    setNotificationCount(count);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getAllNotification().then((res) => setNotificationList(res));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    getNotificationCount();\n  }, [notificationList]);\n\n  const setAllAsRead = () => {\n    setNotificationCount(0);\n    let i;\n    for (i = 0; i < notificationList.length; i += 1) {\n      if (notificationList[i].new === true) {\n        notificationList[i].new = false;\n      }\n    }\n    markAllNotificationAsRead().then((status) => {\n      if (status === 200) {\n        setNotificationList(notificationList);\n      } else {\n        Swal.fire(\n          'Fail to set all to read',\n          'There was an error while conducting this action. Please try again.',\n          'error',\n        );\n      }\n    });\n  };\n\n  const renderNotification = () => notificationList\n      .map((notification, index) => (\n        <List key={index}>\n          {index === notificationList.length - 1 ? (\n            <button type=\"button\" className=\"mainNavBar__mark-all\" onClick={setAllAsRead}>\n              Mark All As Read\n            </button>\n            ) : (\n              ''\n            )}\n          <ListItem>\n            <ListItemAvatar>\n              <Avatar alt=\"action\" src={notification.image} />\n            </ListItemAvatar>\n            <ListItemText\n              primary={notification.message}\n              secondary={<>{notification.receivedTime}</>}\n            />\n            {notification.new ? <div className=\"mainNavBar__status\" /> : ''}\n          </ListItem>\n          {index === 0 ? '' : <Divider variant=\"inset\" component=\"li\" />}\n        </List>\n        ))\n      .reverse();\n\n  const handleClick = (event) => {\n    renderNotification();\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const logout = () => {\n    history.push('/');\n    sessionStorage.clear();\n  }\n\n  const open = Boolean(anchorEl);\n  const id = open ? 'simple-popover' : undefined;\n  const role = sessionStorage.getItem('role');\n\n  return (\n    <Navbar bg=\"light\" variant=\"light\" className=\"mainNavBar\">\n      <Navbar.Brand href=\"/\" className=\"mainNavBar__company-name\">\n        <img alt=\"\" src={Logo} className={('d-inline-block align-top', 'mainNavBar__logo')} />\n        TherapyGo\n      </Navbar.Brand>\n      <Nav className=\"mainNavBar__navBar\">\n        {role.includes('boss') ? (\n          <Nav.Link\n            href=\"/staff\"\n            className={currentRoute.includes('staff') ? 'mainNavBar__navIsCurrent' : ''}\n          >\n            Staff\n          </Nav.Link>\n        ) : (\n          ''\n        )}\n        <Nav.Link\n          href=\"/worksheet\"\n          className={currentRoute.includes('worksheet') ? 'mainNavBar__navIsCurrent' : ''}\n        >\n          Worksheet\n        </Nav.Link>\n        <Nav.Link\n          href=\"/schedule\"\n          className={currentRoute.includes('schedule') ? 'mainNavBar__navIsCurrent' : ''}\n        >\n          Schedule\n        </Nav.Link>\n      </Nav>\n      <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\" onClick={handleClick}>\n        <Badge badgeContent={notificationCount} color=\"secondary\">\n          <NotificationsIcon />\n        </Badge>\n      </IconButton>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n      >\n        {open ? <div className=\"mainNavBar__notification\">{renderNotification()}</div> : ''}\n      </Popover>\n      <IconButton\n        className=\"mainNavBar__logOutButton\"\n        onClick={logout}\n      >\n        <ExitToAppRoundedIcon />\n      </IconButton>\n    </Navbar>\n  );\n};\n\nexport default NavigationBar;\n"]},"metadata":{},"sourceType":"module"}