{"ast":null,"code":"import axios from 'axios';\nimport config from '../config/index';\n\nconst getBodyPartsAndDurationData = async (date, time, therapistName, roomName) => {\n  let url = '';\n\n  if (therapistName) {\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/` + `selectedRoom/${roomName}/selectedTherapist/${therapistName}`;\n  } else {\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/selectedRoom/${roomName}`;\n  }\n\n  try {\n    const {\n      data: {\n        availableTreatmentList,\n        code\n      }\n    } = await axios.get(url);\n\n    if (code === 200) {\n      return availableTreatmentList;\n    }\n\n    if (code === 404) {\n      const result = ['None'];\n      return result;\n    }\n  } catch (error) {\n    throw new Error(`Get body parts and duration error`, error);\n  }\n\n  return null;\n};\n\nconst getTherapist = async (date, time, bodyPartsAndDuration) => {\n  let url = '';\n\n  if (bodyPartsAndDuration) {\n    const parts = bodyPartsAndDuration.split('--');\n    const treatmentDuration = parts[1].split(' ')[0] * 1;\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/` + `selectedTreatmentTime/${treatmentDuration}`;\n  } else {\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}`;\n  }\n\n  try {\n    let therapistList = await axios.get(url);\n    const {\n      code\n    } = therapistList.data;\n\n    if (code === 200) {\n      therapistList = therapistList.data.therapistList;\n      const list = therapistList.map(p => p.firstName);\n      return list;\n    }\n\n    if (code === 404) {\n      const list = ['None'];\n      return list;\n    }\n  } catch (error) {\n    throw new Error(`getTherapist error is:---->`, error);\n  }\n\n  return null;\n};\n\nconst getDefaultPrice = async (treatmentBodyPart, treatmentDuration, treatmentStyle) => {\n  try {\n    const url = `${config.baseUrl.dev}/treatmentPrice`;\n\n    if (treatmentBodyPart !== 'None') {\n      const res = await axios.post(url, {\n        treatmentBodyPart,\n        treatmentDuration,\n        treatmentStyle\n      });\n      return res.data;\n    }\n\n    if (treatmentBodyPart === 'None') {\n      return 'None';\n    }\n  } catch (error) {\n    throw new Error(`getDefaultPrice error is:---->`, error);\n  }\n\n  return null;\n};\n\nconst submit = async (values, role) => {\n  const url = `${config.baseUrl.dev}/${role}book`;\n\n  try {\n    const result = await axios.post(url, values);\n\n    if (role === 'customer') {\n      return result.data;\n    }\n\n    const {\n      code\n    } = result.data;\n    return code;\n  } catch (error) {\n    throw new Error(`submit error is::---->`, error);\n  }\n};\n\nconst updateSubmit = async (values, serviceId) => {\n  const url = `${config.baseUrl.dev}/update/${serviceId}`;\n\n  try {\n    const result = await axios.put(url, values);\n    return result;\n  } catch (error) {\n    throw new Error(`submit error is::---->`, error);\n  }\n};\n\nexport { getTherapist, getBodyPartsAndDurationData, getDefaultPrice, submit, updateSubmit };","map":{"version":3,"sources":["/Users/sammi/Desktop/TherapyGo/src/api/newAppointment-api.js"],"names":["axios","config","getBodyPartsAndDurationData","date","time","therapistName","roomName","url","baseUrl","dev","data","availableTreatmentList","code","get","result","error","Error","getTherapist","bodyPartsAndDuration","parts","split","treatmentDuration","therapistList","list","map","p","firstName","getDefaultPrice","treatmentBodyPart","treatmentStyle","res","post","submit","values","role","updateSubmit","serviceId","put"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport config from '../config/index';\n\nconst getBodyPartsAndDurationData = async (date, time, therapistName, roomName) => {\n  let url = '';\n  if (therapistName) {\n    url =\n      `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/` +\n      `selectedRoom/${roomName}/selectedTherapist/${therapistName}`;\n  } else {\n    url = \n    `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/selectedRoom/${roomName}`;\n  }\n  try {\n    const {\n      data: { availableTreatmentList, code },\n    } = await axios.get(url);\n    if (code === 200) {\n      return availableTreatmentList;\n    }\n    if (code === 404) {\n      const result = ['None'];\n      return result;\n    }\n  } catch (error) {\n    throw new Error(`Get body parts and duration error`, error);\n  }\n  return null;\n};\n\nconst getTherapist = async (date, time, bodyPartsAndDuration) => {\n  let url = '';\n  if (bodyPartsAndDuration) {\n    const parts = bodyPartsAndDuration.split('--');\n    const treatmentDuration = parts[1].split(' ')[0] * 1;\n    url =\n      `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}/` +\n      `selectedTreatmentTime/${treatmentDuration}`;\n  } else {\n    url = `${config.baseUrl.dev}/selectedDate/${date}/selectedTime/${time}`;\n  }\n  try {\n    let therapistList = await axios.get(url);\n    const { code } = therapistList.data;\n    if (code === 200) {\n      therapistList = therapistList.data.therapistList;\n      const list = therapistList.map((p) => p.firstName);\n      return list;\n    }\n    if (code === 404) {\n      const list = ['None'];\n      return list;\n    }\n  } catch (error) {\n    throw new Error(`getTherapist error is:---->`, error);\n  }\n  return null;\n};\n\nconst getDefaultPrice = async (treatmentBodyPart, treatmentDuration, treatmentStyle) => {\n  try {\n    const url = `${config.baseUrl.dev}/treatmentPrice`;\n    if (treatmentBodyPart !== 'None') {\n      const res = await axios.post(url, {\n        treatmentBodyPart,\n        treatmentDuration,\n        treatmentStyle,\n      });\n      return res.data;\n    }\n    if (treatmentBodyPart === 'None') {\n      return 'None';\n    }\n  } catch (error) {\n    throw new Error(`getDefaultPrice error is:---->`, error);\n  }\n  return null;\n};\n\nconst submit = async (values, role) => {\n  const url = `${config.baseUrl.dev}/${role}book`;\n  try {\n    const result = await axios.post(url, values);\n    if (role === 'customer') {\n      return result.data;\n    }\n    const { code } = result.data;\n    return code;\n  } catch (error) {\n    throw new Error(`submit error is::---->`, error);\n  }\n};\n\nconst updateSubmit = async (values, serviceId) => {\n  const url = `${config.baseUrl.dev}/update/${serviceId}`;\n  try {\n    const result = await axios.put(url, values);\n    return result;\n  } catch (error) {\n    throw new Error(`submit error is::---->`, error);\n  }\n};\n\nexport { getTherapist, getBodyPartsAndDurationData, getDefaultPrice, submit, updateSubmit };\n"]},"metadata":{},"sourceType":"module"}