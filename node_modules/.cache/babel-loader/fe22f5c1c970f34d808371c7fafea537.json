{"ast":null,"code":"import axios from 'axios';\nimport errorHandler from './errorHandler';\n\nclass HttpRequest {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n\n  getInsiderConfig() {\n    const config = {\n      baseURL: this.baseUrl,\n      headers: {\n        'content-Type': 'application/json;charset=utf-8'\n      },\n      timeout: 10000\n    };\n    return config;\n  }\n\n  interceptors(instance) {\n    instance.interceptors.request.use(config => {\n      const myConfig = config;\n      this.token = window.sessionStorage.getItem('token');\n      const authToken = `bearer ${this.token}`;\n\n      if (this.token) {\n        myConfig.headers.common.Authorization = authToken;\n      }\n\n      return myConfig;\n    }, err => {\n      errorHandler(err);\n      return Promise.reject(err);\n    });\n    instance.interceptors.response.use(res => {\n      if (res.status === 200) {\n        return Promise.resolve(res.data);\n      }\n\n      return Promise.reject(res);\n    }, err => {\n      errorHandler(err);\n      return Promise.reject(err);\n    });\n  }\n\n  request(options) {\n    const instance = axios.create();\n    const newOption = Object.assign(this.getInsiderConfig(), options);\n    this.interceptors(instance);\n    return instance(newOption);\n  }\n\n  get(url, config) {\n    const options = {\n      method: 'get',\n      url,\n      ...config\n    };\n    return this.request(options);\n  }\n\n  post(url, data) {\n    return this.request({\n      method: 'post',\n      url,\n      data\n    });\n  }\n\n  put(url, data) {\n    return this.request({\n      method: 'put',\n      url,\n      data\n    });\n  }\n\n  deleteById(url, id) {\n    return this.request({\n      method: 'delete',\n      url,\n      params: id\n    });\n  }\n\n  deleteByEmail(url, email) {\n    return this.request({\n      method: 'delete',\n      url,\n      data: email\n    });\n  }\n\n}\n\nexport default HttpRequest;","map":{"version":3,"sources":["/Users/sammi/Desktop/TherapyGo/src/utils/HttpRequest.js"],"names":["axios","errorHandler","HttpRequest","constructor","baseUrl","getInsiderConfig","config","baseURL","headers","timeout","interceptors","instance","request","use","myConfig","token","window","sessionStorage","getItem","authToken","common","Authorization","err","Promise","reject","response","res","status","resolve","data","options","create","newOption","Object","assign","get","url","method","post","put","deleteById","id","params","deleteByEmail","email"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport errorHandler from './errorHandler';\n\nclass HttpRequest {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n\n  getInsiderConfig() {\n    const config = {\n      baseURL: this.baseUrl,\n      headers: {\n        'content-Type': 'application/json;charset=utf-8',\n      },\n      timeout: 10000,\n    };\n    return config;\n  }\n\n  interceptors(instance) {\n    instance.interceptors.request.use(\n      (config) => {\n        const myConfig = config;\n        this.token = window.sessionStorage.getItem('token');\n        const authToken = `bearer ${this.token}`;\n        if (this.token) {\n          myConfig.headers.common.Authorization = authToken;\n        }\n        return myConfig;\n      },\n      (err) => {\n        errorHandler(err);\n        return Promise.reject(err);\n      },\n    );\n\n    instance.interceptors.response.use(\n      (res) => {\n        if (res.status === 200) {\n          return Promise.resolve(res.data);\n        }\n        return Promise.reject(res);\n      },\n      (err) => {\n        errorHandler(err);\n        return Promise.reject(err);\n      },\n    );\n  }\n\n  request(options) {\n    const instance = axios.create();\n    const newOption = Object.assign(this.getInsiderConfig(), options);\n    this.interceptors(instance);\n    return instance(newOption);\n  }\n\n  get(url, config) {\n    const options = {\n      method: 'get',\n      url,\n      ...config,\n    };\n    return this.request(options);\n  }\n\n  post(url, data) {\n    return this.request({\n      method: 'post',\n      url,\n      data,\n    });\n  }\n\n  put(url, data) {\n    return this.request({\n      method: 'put',\n      url,\n      data,\n    });\n  }\n\n  deleteById(url, id) {\n    return this.request({\n      method: 'delete',\n      url,\n      params: id,\n    });\n  }\n\n  deleteByEmail(url, email) {\n    return this.request({\n      method: 'delete',\n      url,\n      data: email,\n    });\n  }\n}\n\nexport default HttpRequest;\n"]},"metadata":{},"sourceType":"module"}