{"ast":null,"code":"var _jsxFileName = \"/Users/sammi/Desktop/TherapyGo/src/pages/ClientOnePage/Components/Booking/BookingCalendar.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef, memo } from 'react';\nimport Calendar from 'react-calendar';\nimport './BookingCalendar.scss';\nimport { AvailableTimeList } from './AvailableTimeList';\nimport { fetchTimeList } from '../../../../api/clientBooking-api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst usePrevious = value => {\n  _s();\n\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\n_s(usePrevious, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n\nconst BookingCalendar = /*#__PURE__*/memo(_c = _s2(() => {\n  _s2();\n\n  const [date, setDate] = useState(new Date());\n  const [timeList, setTimeList] = useState([]);\n\n  const formatDate = inputDate => {\n    const dateNum = inputDate.getDate();\n    const dateMon = inputDate.getMonth() + 1;\n    const dateYear = inputDate.getFullYear();\n    const myDate = `${dateYear}-${dateMon > 9 ? '' : '0'}${dateMon}-${dateNum > 9 ? '' : '0'}${dateNum}`;\n    return myDate;\n  };\n\n  const myDate = formatDate(date);\n  let preDate = usePrevious(date);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClick = (newDate, e) => {\n    e.stopPropagation();\n    if (preDate) preDate = preDate.toLocaleDateString();\n    let currentDate = null;\n    if (newDate) currentDate = newDate.toLocaleDateString();\n    if (preDate === undefined) setIsOpen(true);\n    if (preDate === currentDate) setIsOpen(!isOpen);\n    if (preDate !== currentDate) setIsOpen(true);\n    const fetchDate = formatDate(newDate);\n    fetchTimeList(fetchDate).then(res => setTimeList(res)).catch(error => {\n      throw new Error(`Booking Calendar - handle click ${error}`);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"BookingCalendarContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"BookingCalendarContainer__calendar\",\n        children: /*#__PURE__*/_jsxDEV(Calendar, {\n          onChange: setDate,\n          value: date,\n          minDate: new Date(),\n          onClickDay: handleClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"BookingCalendarContainer__timeList\",\n        children: isOpen ? /*#__PURE__*/_jsxDEV(AvailableTimeList, {\n          timeList: timeList,\n          myDate: myDate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}, \"nL8IXPQNFEXQ+rFDa6qtS7qE3p4=\", false, function () {\n  return [usePrevious];\n}));\n_c2 = BookingCalendar;\nexport default BookingCalendar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BookingCalendar$memo\");\n$RefreshReg$(_c2, \"BookingCalendar\");","map":{"version":3,"sources":["/Users/sammi/Desktop/TherapyGo/src/pages/ClientOnePage/Components/Booking/BookingCalendar.js"],"names":["React","useState","useEffect","useRef","memo","Calendar","AvailableTimeList","fetchTimeList","usePrevious","value","ref","current","BookingCalendar","date","setDate","Date","timeList","setTimeList","formatDate","inputDate","dateNum","getDate","dateMon","getMonth","dateYear","getFullYear","myDate","preDate","isOpen","setIsOpen","handleClick","newDate","e","stopPropagation","toLocaleDateString","currentDate","undefined","fetchDate","then","res","catch","error","Error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, memo } from 'react';\nimport Calendar from 'react-calendar';\nimport './BookingCalendar.scss';\n\nimport { AvailableTimeList } from './AvailableTimeList';\nimport { fetchTimeList } from '../../../../api/clientBooking-api';\n\nconst usePrevious = (value) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nconst BookingCalendar = memo(() => {\n  const [date, setDate] = useState(new Date());\n  const [timeList, setTimeList] = useState([]);\n\n  const formatDate = (inputDate) => {\n    const dateNum = inputDate.getDate();\n    const dateMon = inputDate.getMonth() + 1;\n    const dateYear = inputDate.getFullYear();\n    const myDate = `${dateYear}-${dateMon > 9 ? '' : '0'}${dateMon}-${\n      dateNum > 9 ? '' : '0'\n    }${dateNum}`;\n    return myDate;\n  };\n\n  const myDate = formatDate(date);\n  let preDate = usePrevious(date);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleClick = (newDate, e) => {\n    e.stopPropagation();\n    if (preDate) preDate = preDate.toLocaleDateString();\n    let currentDate = null;\n    if (newDate) currentDate = newDate.toLocaleDateString();\n    if (preDate === undefined) setIsOpen(true);\n    if (preDate === currentDate) setIsOpen(!isOpen);\n    if (preDate !== currentDate) setIsOpen(true);\n    const fetchDate = formatDate(newDate);\n    fetchTimeList(fetchDate)\n      .then((res) => setTimeList(res))\n      .catch((error) => {\n        throw new Error(`Booking Calendar - handle click ${error}`);\n      });\n  };\n\n  return (\n    <div>\n      <div className=\"BookingCalendarContainer\">\n        <div className=\"BookingCalendarContainer__calendar\">\n          <Calendar onChange={setDate} value={date} minDate={new Date()} onClickDay={handleClick} />\n        </div>\n        <div className=\"BookingCalendarContainer__timeList\">\n          {isOpen ? <AvailableTimeList timeList={timeList} myDate={myDate} /> : null}\n        </div>\n      </div>\n    </div>\n  );\n});\n\nexport default BookingCalendar;\n"]},"metadata":{},"sourceType":"module"}